Python has a lot of GUI frameworks, but Tkinter is the only framework that’s
built into the Python standard library. Tkinter has several strengths. It’s 
cross-platform, so the same code works on Windows, macOS, and Linux. Visual 
elements are rendered using native operating system elements, so applications
built with Tkinter look like they belong on the platform where they’re run.

Although Tkinter is considered the de facto Python GUI framework, it’s not
without criticism. One notable criticism is that GUIs built with Tkinter look
outdated. If you want a shiny, modern interface, then Tkinter may not be what
you’re looking for.

However, Tkinter is lightweight and relatively painless to use compared to other
frameworks. This makes it a compelling choice for building GUI applications in
Python, especially for applications where a modern sheen is unnecessary, and the
top priority is to quickly build something that’s functional and cross-platform.

Building Your First Python GUI Application With Tkinter

The foundational element of a Tkinter GUI is the window. Windows are the containers
in which all other GUI elements live. These other GUI elements, such as text boxes,
labels, and buttons, are known as widgets. Widgets are contained inside of windows.

First, create a window that contains a single widget.

With your Python shell open, the first thing you need to do is import the Python
GUI Tkinter module:

>>> import tkinter as tk

A window is an instance of Tkinter’s Tk class. Go ahead and create a new window and
assign it to the variable window:

>>> window = tk.Tk()

Adding a Widget

Now that you have a window, you can add a widget. Use the tk.Label class to add some
text to a window. Create a Label widget with the text "Hello, Tkinter" and assign it
to a variable called greeting:

>>> greeting = tk.Label(text="Hello, Tkinter")
The window you created earlier doesn’t change. You just created a Label widget,
but you haven’t added it to the window yet. There are several ways to add widgets to
a window. Right now, you can use the Label widget’s .pack() method:

>>> greeting.pack()

When you pack a widget into a window, Tkinter sizes the window as small as it
can be while still fully encompassing the widget. Now execute the following:

>>> window.mainloop()

Nothing seems to happen, but notice that no new prompt appears in the shell.
window.mainloop() tells Python to run the Tkinter event loop. This method listens for
events, such as button clicks or keypresses, and blocks any code that comes after it
from running until you close the window where you called the method. Go ahead and
close the window you’ve created, and you’ll see a new prompt displayed in the shell.

Check Your Understanding
Expand the code blocks below to check your understanding:

Write a full Python script that creates a Tkinter window with the text "Python rocks!".

Here’s one possible solution:

import tkinter as tk

window = tk.Tk()
label = tk.Label(text="Python rocks!")
label.pack()

window.mainloop()

Keep in mind your code may look different

